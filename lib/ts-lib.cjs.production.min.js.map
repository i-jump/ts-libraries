{"version":3,"file":"ts-lib.cjs.production.min.js","sources":["../src/array/countArray.ts","../src/array/difference.ts","../src/array/intersection.ts","../src/array/maxArray.ts","../src/array/sumArray.ts","../src/array/meanArray.ts","../src/array/minArray.ts","../src/array/shuffle.ts","../src/cookies/clearCookie.ts","../src/cookies/delCookie.ts","../src/cookies/getCookie.ts","../src/cookies/setCookie.ts","../src/device/isWecat.ts","../src/fun/as.ts","../src/judge/types.ts","../src/judge/isEmpty.ts","../src/math/distance.ts","../src/math/esc.ts","../src/math/gcm.ts","../src/math/round.ts","../src/network/formData.ts","../src/network/mergeQuery.ts","../src/network/parseUrl.ts","../src/random/randomColor.ts","../src/random/rangeRandom.ts","../src/regexp/isEmail.ts","../src/string/dictionary.ts","../src/string/escMobile.ts","../src/string/escapeStr.ts","../src/string/trim.ts","../src/time/formatDay.ts","../src/time/milliseconds.ts","../src/time/runningTime.ts"],"sourcesContent":["/**\n * 统计数组中特定值出现的次数\n * @param {Array} arr 需要查询的数组\n * @param {Any} value 目标项\n * @return {number} 统计次数\n */\n\nexport default (arr: Array<any>, value: any) => {\n\n    if (({}).toString.call(arr) !== '[object Array]') throw Error('The first argument must be of type Array')\n\n    return arr.reduce((prev: number, next: any) => prev + Number(next === value), 0)\n}\n\n\nexport const points = (a:string,b:number):string => {\n    return a+b;\n};\n","/**\n * 数组取差集\n * @param {Array} arr1 目标数组1\n * @param {Array} arr2 目标数组2\n * @return {Array} 数组差集\n */\nexport default (arr1: Array<any>, arr2: Array<any>): Array<any> => {\n    if (({}).toString.call(arr1) !== '[object Array]' || ({}).toString.call(arr2) !== '[object Array]') throw Error('The first argument must be of type Array')\n\n    const s = new Set(arr2)\n\n    return arr1.filter(x => !s.has(x))\n}\n","/**\n * 数组取交集\n * @param {Array} arr1 目标数组1\n * @param {Array} arr2  目标数组2\n * @return {Array} 数组交集\n */\nexport default (arr1: Array<any>, arr2: Array<any>): Array<any> => {\n    const all = Array.from(new Set([...arr1, ...arr2]))\n\n    return all.filter(x => arr1.includes(x) && arr2.includes(x))\n}\n","/**\n * 数组最大值\n * @param {Array} arr\n * @return {Number}\n */\nexport default (arr: Array<number>): number => Math.max.apply(null, arr)\n\n","/**\n * 数组求和\n * @param {Array} arr\n * @return {Number}\n */\nexport default (arr: Array<number>): number => arr.reduce((pre, cur) => pre + cur)\n\n","import sum from './sumArray'\n\n/**\n * 数组求平均值\n * @param {Array} arr\n * @return {Number}\n */\nexport default (arr: Array<number>): number => sum(arr) / arr.length\n\n","/**\n * 数组最小值\n * @param {Array} arr\n * @return {Number}\n */\nexport default (arr: Array<number>): number => Math.min.apply(null, arr)\n\n","/**\n * 洗牌算法\n * \n * @param {any} arr 需要洗牌的数组\n * @returns 洗后数组\n */\nexport default (arr: Array<any>): Array<any> => {\n    for (let i = 0; i < arr.length; i++) {\n        const randomIndex = i + Math.floor(Math.random() * (arr.length - i));\n        [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]]\n    }\n\n    return arr\n}\n\n","/**\n * 清空客户端cookie模块\n *\n * @param {string[]} paths 需要清除cookie 作用于集合\n * @param {string[]} domains 需要清除cookie 域集合\n */\n\nfunction clearCookie(path: string, domain: string): void\nfunction clearCookie(path: Array<string>, domain: Array<string>): void\nfunction clearCookie(path: any, domain: any): void {\n  let exp = new Date()\n  let keys = document.cookie.match(/[^ =;]+(?=\\=)/g)\n  let paths: Array<string> = []\n  let domains: Array<string> = []\n\n  if (Array.isArray(path))\n    paths = path\n  else\n    paths.push(path || '/')\n\n  if (Array.isArray(domain))\n    domains = path\n  else\n    domains.push(domain || '')\n\n  if (!keys) return\n  \n  exp.setDate(exp.getDate() - 1)\n\n  keys.forEach((key: string): any => domains.forEach((domain: string): any => paths.forEach((path: string): any => document.cookie = `${key}=0;path=${path};Domain=${domain};expires=${exp.toUTCString()}`)))\n}\n\nexport default clearCookie\n","/**\n * 删除cookie模块\n */\n\ninterface CookieInfo {\n  key: string // 要删除的cookie键名 (必选)\n  path?: string // 要删除的cookie值 (可选)\n  domain?: string // 要删除的cookie值 (可选)\n}\n\n/**\n * @param {String} key // cookie键\n * @param {String} path // cookie 作用域\n * @param {String} domain // cookie 域\n */\nfunction cleanFactory(\n  key: string,\n  path: string = '/',\n  domain: string = ''\n): void {\n  let now = new Date()\n  now.setDate(now.getDate() - 1)\n\n  document.cookie = `${key}=0;path=${path};Domain=${domain};expires=${now.toUTCString()}`\n}\n\n/**\n * 从客户端删除一个或者多个cookie\n * @param {string | string[] | CookieInfo[]} keys 需要删除的一个key值或者多个key值(cookie描述对象)\n */\nfunction delCookie(keys: string, path: string, domain: string): void\nfunction delCookie(keys: CookieInfo): void\nfunction delCookie(keys: Array<string>): void\nfunction delCookie(keys: Array<CookieInfo>): void\nfunction delCookie(keys: any, path?: string, domain?: string): void {\n  if (typeof keys === 'string') return cleanFactory(keys, path, domain)\n\n  if (({}).toString.call(keys) === '[object Object]') keys = [keys]\n\n  const isArr: boolean = Array.isArray(keys)\n\n  if (isArr && typeof keys[0] === 'string') return keys.forEach((key: string): any => cleanFactory(key))\n\n  if (isArr && typeof keys[0] === 'object') {\n    keys.forEach(\n      (target: CookieInfo): void => {\n        const {key, path, domain}: CookieInfo = target\n        \n        cleanFactory(key, path, domain)\n      }\n    )\n  }\n}\n\nexport default delCookie\n","/**\n * 获取cookie模块\n * @param {string} key // 需要获取的键\n */\n\nfunction grabCookies(key: string): string | null {\n  let arr: any\n  let reg = new RegExp(`(^| )${key}=([^;]*)(;|$)`)\n\n  if ((arr = document.cookie.match(reg))) return arr[2]\n\n  return null\n}\n\n/**\n * 根据传入 key 获取本地一个多个cookie\n *\n * @param {string | string[]} keys 需要获取cookie的 keys\n * @returns {string | object} 返回获取后的结果 (多个值返回值为对象类型)\n */\nfunction getCookie(keys: Array<string>): any\nfunction getCookie(keys: string): string\nfunction getCookie(keys: any): any {\n  if (Array.isArray(keys)) {\n    let results: any = {}\n\n    keys.forEach((key: string): any => results[key] = grabCookies(key))\n\n    return results\n  }\n\n  return grabCookies(keys.toString())\n}\n\nexport default getCookie\n","/**\n * 设置cookie模块\n */\n\ninterface CookieInfo {\n  key: string // 要设置的cookie键名 (必选)\n  value: string // 要设置的cookie值 (必选)\n  path?: string // 要设置的cookie值 (可选)\n  domain?: string // 要设置的cookie值 (可选)\n  expires?: number // 要设置的cookie值 (可选)\n}\n\n/**\n * 设置单个值\n *\n * @param {CookieInfo} cookie cookie描述对象\n */\nfunction operation(cookie: CookieInfo) {\n  let {key, value, path = '/', domain = '', expires = 7} = cookie\n  let now = new Date()\n\n  now.setDate(now.getDate() + expires)\n\n  document.cookie = `${key}=${escape(\n    value\n  )};path=${path};Domain=${domain};expires=${now.toUTCString()}`\n}\n\n/**\n * 设置一个或者多个cookie到客户端\n *\n * @param {string | CookieInfo | CookieInfo[]} cookie cookie key 或 描述对象(可接受多个描述对象)\n * @param {string} value 需设置cookie值(当cookie为 string时 value为必选字段)\n */\nfunction setCookie(cookie: string, value: string, path: string, domain: string): void\nfunction setCookie(cookie: CookieInfo): void\nfunction setCookie(cookie: Array<CookieInfo>): void\nfunction setCookie(cookie: any, value?: string, path?: string, domain?: string) {\n  let args: Array<CookieInfo> = []\n\n  if (typeof cookie === 'string') {\n    value = value || ''\n    let cookieInfo: CookieInfo = {key: cookie, value, path, domain}\n\n    cookie = cookieInfo\n  }\n\n  if (({}).toString.call(cookie) === '[object Object]') args = [cookie]\n\n  if (Array.isArray(cookie)) args = cookie\n\n  args.forEach(\n    (arg: CookieInfo): void => {\n      operation(arg)\n    }\n  )\n}\n\nexport default setCookie\n","/**\n * 检测是否在微信浏览器中\n *\n * @return {Boolean} 检测结果\n */\nexport default (): boolean => {\n  const ua: string = navigator.userAgent.toLowerCase()\n\n  return ua.indexOf('micromessenger') != -1\n}\n\n","interface Interface {\n    a:number,\n    b:string\n}\nexport default function (obj:Interface): string {\n    return obj.b;\n}\n","/***\n * \n *  .--,       .--,\n * ( (  \\.---./  ) )\n *  '.__/o   o\\__.'\n *     {=  ^  =}\n *      >  -  <\n *     /       \\\n *    //       \\\\\n *   //|   .   |\\\\\n *   \"'\\       /'\"_.-~^`'-.\n *      \\  _  /--'         `\n *    ___)( )(___\n *   (((__) (__)))    \n * \n * 高山仰止,景行行止.虽不能至,心向往之。\n */\n/**\n * 类型判断模块\n */\n\nconst basicTypes: string[] = [\n  'Undefined',\n  'Null',\n  'String',\n  'Number',\n  'Boolean',\n  'Function',\n  'Symbol',\n  'Object',\n  'Array',\n  'Date',\n  'RegExp',\n  'Arguments',\n  'Error',\n  'Map',\n  'WeakMap',\n  'Set',\n  'WeakSet',\n  'XMLHttpRequest',\n  'FormData',\n  'URLSearchParams'\n]\n\nlet typeObj: Map<string, string> = new Map()\n\n/**\n * 类型检测方法工厂\n * \n * @param {String} basicType 类型\n * @return {Function} 检测函数\n */\nconst concentrated = (basicType: string): Function => (type: any): Boolean => typeOf(type) === basicType.toLowerCase()\n\n/**\n * 检测传入任意数据的数据类型\n *\n * @param {Any} type 待检测数据\n * @return {String} 返回检测结果\n */\nconst typeOf = (type: any): string => {\n  const typeName: string = Object.prototype.toString.call(type)\n\n  return typeObj.get(typeName) || 'unknown'\n}\n\nlet caller: {[index: string]: any} = {typeOf, isNaN}\n\nbasicTypes.forEach(\n  (item: string): void => {\n    typeObj.set(`[object ${item}]`, item.toLowerCase())\n\n    // 批量生成类型判断方法\n    caller[`is${item}`] = concentrated(item)\n  }\n)\n\nexport default caller\n\n","/**\n * 空数据检测模块\n */\nimport types from './types'\n\nconst emptyMethod = (): boolean => false\n\nconst typeList: Array<string> = ['string', 'object', 'array', 'map', 'set']\nconst methods: Array<Function> = [\n  (target: string): boolean => !target.trim(),\n  (target: {[index: string] : any}): boolean => JSON.stringify(target) === '{}',\n  (target: Array<any>): boolean => !target.length,\n  (target: Map<any, any>): boolean => target.size < 1,\n  (target: Set<any>): boolean => target.size < 1,\n]\nconst factory: Map<string, Function> = new Map()\n\ntypeList.forEach(\n  (type: string, index: number): void => {\n    factory.set(type, methods[index])\n  }\n)\n\n/**\n * 检测传入任意类型数据是否为空（注：string、array、object、map、set（null、undefined将被视为空）除现有类型其他均被视为不为空）\n *\n * @param {Any} target 目标数据\n * @return {Boolean} 返回检测结果\n */\nexport default  (target: any): boolean => {\n  let key: string = types.typeOf(target)\n\n  if (key === 'null' || key === 'undefined') return true\n\n  let method: Function = factory.get(key) || emptyMethod\n\n  return method(target)\n}\n\n","/**\n * 计算两点 (x0, y0), (x1, y1) 之间的欧几里得距离\n * @param {Number} x0\n * @param {Number} y0\n * @param {Number} x1\n * @param {Number} y1\n * @return {Number}\n */\nexport default (x0: number, y0: number, x1: number, y1: number): number => Math.hypot(x1 - x0, y1 - y0)\n","/**\n * 整数间汉明距离\n *\n * @param {number} num1 起始数字\n * @param {number} num2 结束数字\n * @return {number} 汉明距离\n */\n\nexport default (num1: number, num2: number): number => {\n    if (typeof num1! == 'number' || typeof num2! == 'number') return 0\n\n    return ((num1 ^ num2).toString(2).match(/1/g) || '').length\n}\n","/**\n * 求最大公约数\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst gcm = (x: number, y: number): number => !y ? x : gcm(y, x % y)\n\nexport default gcm\n","/**\n * 数字四舍五入(可以指定保留几位小数)\n * @param {Number} value    数值\n * @param {Number} position 保留几位小数\n * @return {String}\n */\nexport default (value: number, position = 0): string => {\n    const tmp = Math.pow(10, position)\n    \n    let result = (Math.round(value * tmp) / tmp).toString()\n\n    let num = result.split('.')[1] ? result.split('.')[1].length : 0\n    \n    while (num < position) {\n        result += !result.includes('.') ? '.0' : '0'\n      \n         num++\n    }\n\n    return result\n}\n","/**\n * 参数转formData形式\n *\n * @param {Object} params 需要处理的参数\n * \n * @return {FormData}\n */\n\nexport default (params: {[index: string]: string}): FormData => {\n    if (typeof params !== 'object') return params\n\n    let formData: FormData = new FormData()\n\n    for (let key in params) formData.append(key, params[key])\n\n    return formData\n}\n","import isEmpty from '../judge/isEmpty'\n\n/**\n * 拼接url与参数\n *\n * @param {String} url 目标url，可默认带参数\n * @param {Object} params 需要拼接的参数\n * @return {String}\n */\nexport default (url: string, params: any): string => {\n  if (isEmpty(params)) return url\n\n  const isParam = url.indexOf('?', 0) !== -1\n\n  if (typeof params !== 'object') return `${url}${isParam ? '&' : '?'}${params}`\n\n  const query: any = Object.keys(params)\n    .map((key: string): string => `${key}=${params[key]}`)\n    .join('&')\n\n  return query ? `${url}${isParam ? '&' : '?'}${query}` : url\n}\n","/**\n * 根据传入规则自动补全接口项目名\n *\n * @param {Array} rules 需要排除的项目名集合\n * @param {String} target 需要补全的项目名\n * @return 二阶函数\n */\n\nexport default (rules: Array<string>, target: string): Function => (\n  url: string\n): string => {\n  if (!Array.isArray(rules) || typeof url !== 'string') return url\n\n  if (!rules.includes(target)) rules.push(target)\n\n  let reg = new RegExp(`/${rules.join('|')}`)\n\n  return /^http|https/.test(url) ? url : reg.test(url) ? url : `${target}${url}`\n}\n","/**\n * 随机生成颜色\n */\nexport default (): string => '#' + ('000' + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n\n","import types from '../judge/types'\n\n/**\n * 生成指定范围随机整数\n * @param {Number} max 最大值\n * @param {Number} min 最小值\n * @param {String} border 边界 'both'、'left'、'right'、'no'\n */\nexport default (min: number, max: number, border: string = 'both') => {\n  if (min === max) return 0\n\n  const range: number = max - min\n\n  let random = Math.random() || 1\n\n  const processing: {[index: string]: Function} = {\n    left: () => min + Math.floor(random * range),\n    right: () => min + Math.ceil(random * range),\n    no: () => {\n      if (max - min < 1 || max - min === 1) throw Error('The boundary value is unreasonable')\n      return min + Math.ceil(random * (range - 1))\n    },\n    both: () => min + Math.round(random * range)\n  }\n\n  let f: Function = processing[border]\n\n  if (!types.isFunction(f)) f = processing['both']\n\n  return f()\n}\n","export default (email: string): boolean => {\n    if (typeof email !== 'string') throw Error('Email expects strings !')\n\n    const reg: RegExp = /^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$/\n\n    return reg.test(email)\n}\n","/**\n * 字典顺序整理\n */\n\nconst strChineseFirstPY: stringn\n\nconst reg: RegExp = /^[\\u4E00-\\u9FA5A-Za-z]/\n\n/**\n * 获取传入字符串首字母\n * \n * @param {string} target \n * @returns 找到的首字母\n */\nfunction makePy(target: string) {\n\n    if (typeof target !== 'string') throw new Error(\"The expected thing is of type string\")\n\n    const ch = target.charAt(0)\n\n    return checkCh(ch)\n}\n\n/**\n * 根据字符串首字母Unicode码查询首字母\n * \n * @param {string} ch \n * @returns 找到的首字母\n */\nfunction checkCh(ch: string){\n    if (!reg.test(ch)) return '#'\n\n    const uni = ch.charCodeAt(0)\n\n    if (uni > 40869 || uni < 19968) return ch\n\n    return strChineseFirstPY.charAt(uni - 19968)\n}\n\nexport default makePy\n","/**\n * 加密手机号\n * \n * @param {string | number} 目标手机号 \n * @returns 加密后的手机号\n */\n\nexport default (tel: number | string) => {\n    const types: Array<string> = ['number', 'string']\n\n    if (!types.includes(typeof(tel))) throw Error('tel expects Numbers or strings')\n\n    if (typeof tel === 'number') tel = tel.toString()\n\n    return tel.substr(0, 3) + \"****\" + tel.substr(7, 4)\n}\n\n","/**\n * 转义特殊字符\n * @param {string} str 需要转义的字符串\n */\nexport default (str: string) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","/**\n * 去除空格\n * @param {string} str\n * @param {number} type all-所有空格(不传), around-前后空格，left-前空格，right-后空格\n */\n\nexport default (str: string, type: string = 'all'): string => {\n  const types: {[index: string]: RegExp} = {\n    all: /\\s*/g,\n    around: /(^\\s*)|(\\s*$)/g,\n    left: /(^\\s*)/g,\n    right: /(\\s*$)/g\n  }\n\n  return str.replace(types[type], '')\n}\n\n","/**\n * ms 转换成天 时 分 秒\n * @param {time: number} time 目标时间ms number类型\n *\n * @return {object} return 转化后的对象\n */\n\nexport default (time: number): {[index: string]: string} => { //传入的是ms 秒杀新增天和0.1秒\n    const t: number = Math.floor(time / 1000)\n    const d: number = Math.floor(t / 60 / 60 / 24)\n    const h: number = Math.floor(t / 60 / 60 % 24)\n    const m: number = Math.floor(t / 60 % 60)\n    const s: number = Math.floor(t % 60)\n    const ms: number = Math.floor(time / 100 % 10)\n    \n    return {\n        day: `${d > 9 ? d : '0' + d}`,\n        hour: `${h > 9 ? h : '0' + h}`,\n        minute: `${m > 9 ? m : '0' + m}`,\n        second: `${s > 9 ? s : '0' + s}`,\n        ms: ms.toString()\n    }\n}","/**\n * 将目标参数date转换成时间戳  暂时只支持  1970-01-01 01:01:01 | 1970年01月01日 01时01分01秒 | new Date()\n * @param {date: Date} date 目标时间格式\n * \n * @param {format = '-'} format '-' 可传入参数  默认 '-' \n *\n * @return {number} return 转化后的时间戳\n */\nexport default (date: any, format: string = '-'): number => {\n\n    if (typeof date === 'string' && format === '-') {\n\n        const replacement: string = date.replace(new RegExp(format, 'gm'), '/');\n\n        return new Date(replacement).getTime();\n    }\n    if (typeof date === 'string' && format !== '-') {\n        const replacement1: string = date.replace(new RegExp(/[年|月]/, \"gm\"), \"-\").replace(new RegExp(/[时|分]/, \"gm\"), \":\").replace(new RegExp(/[日|秒]/, \"gm\"), \"\")\n\n        const milliseconds: number =  new Date(replacement1).getTime()\n        return isNaN(milliseconds) ? 0 : milliseconds;\n    }\n\n    if (Object.prototype.toString.call(date) === '[object Date]') {\n\n        return date.getTime();\n    }\n\n    return 0;\n}","/**\n * 测试功能所花费的时间\n * @param {Function} callback 需要检测的目标函数\n * @param {Any} 函数执行返回结果\n */\n\nexport default (callback: Function): any => {\n  if (typeof callback !== 'function') return callback\n\n  console.time('startTime')\n\n  const run = callback()\n\n  console.timeEnd('endTime')\n\n  return run\n}\n"],"names":["arr","value","toString","call","Error","reduce","prev","next","Number","points","a","b","arr1","arr2","s","Set","filter","x","has","Array","from","includes","Math","max","apply","pre","cur","sum","length","min","i","randomIndex","floor","random","clearCookie","path","domain","exp","Date","keys","document","cookie","match","paths","domains","isArray","push","setDate","getDate","forEach","key","toUTCString","cleanFactory","now","delCookie","isArr","target","grabCookies","reg","RegExp","getCookie","results","setCookie","args","arg","expires","escape","navigator","userAgent","toLowerCase","indexOf","obj","typeObj","Map","typeOf","type","typeName","Object","prototype","get","caller","isNaN","item","basicType","set","methods","trim","JSON","stringify","size","factory","index","types","x0","y0","x1","y1","hypot","num1","num2","gcm","y","position","tmp","pow","result","round","num","split","params","formData","FormData","append","url","isEmpty","isParam","query","map","join","rules","test","slice","border","range","processing","left","right","ceil","no","both","f","isFunction","email","strChineseFirstPY","makePy","ch","uni","charCodeAt","charAt","checkCh","tel","substr","str","replace","all","around","time","t","d","h","m","day","hour","minute","second","ms","date","format","replacement","getTime","replacement1","milliseconds","callback","console","run","timeEnd"],"mappings":"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"}